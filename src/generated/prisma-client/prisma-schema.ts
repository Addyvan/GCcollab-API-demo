// Code generated by Prisma (prisma@1.31.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateComment {
  count: Int!
}

type AggregateDiscussion {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Comment {
  id: ID!
  guid: ID!
  author: User!
  parentContent: Discussion!
  parentComment: Comment
  content: String!
}

type CommentConnection {
  pageInfo: PageInfo!
  edges: [CommentEdge]!
  aggregate: AggregateComment!
}

input CommentCreateInput {
  id: ID
  guid: ID!
  author: UserCreateOneInput!
  parentContent: DiscussionCreateOneWithoutCommentsInput!
  parentComment: CommentCreateOneInput
  content: String!
}

input CommentCreateManyWithoutParentContentInput {
  create: [CommentCreateWithoutParentContentInput!]
  connect: [CommentWhereUniqueInput!]
}

input CommentCreateOneInput {
  create: CommentCreateInput
  connect: CommentWhereUniqueInput
}

input CommentCreateWithoutParentContentInput {
  id: ID
  guid: ID!
  author: UserCreateOneInput!
  parentComment: CommentCreateOneInput
  content: String!
}

type CommentEdge {
  node: Comment!
  cursor: String!
}

enum CommentOrderByInput {
  id_ASC
  id_DESC
  guid_ASC
  guid_DESC
  content_ASC
  content_DESC
}

type CommentPreviousValues {
  id: ID!
  guid: ID!
  content: String!
}

input CommentScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentScalarWhereInput!]
  OR: [CommentScalarWhereInput!]
  NOT: [CommentScalarWhereInput!]
}

type CommentSubscriptionPayload {
  mutation: MutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CommentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CommentWhereInput
  AND: [CommentSubscriptionWhereInput!]
  OR: [CommentSubscriptionWhereInput!]
  NOT: [CommentSubscriptionWhereInput!]
}

input CommentUpdateDataInput {
  guid: ID
  author: UserUpdateOneRequiredInput
  parentContent: DiscussionUpdateOneRequiredWithoutCommentsInput
  parentComment: CommentUpdateOneInput
  content: String
}

input CommentUpdateInput {
  guid: ID
  author: UserUpdateOneRequiredInput
  parentContent: DiscussionUpdateOneRequiredWithoutCommentsInput
  parentComment: CommentUpdateOneInput
  content: String
}

input CommentUpdateManyDataInput {
  guid: ID
  content: String
}

input CommentUpdateManyMutationInput {
  guid: ID
  content: String
}

input CommentUpdateManyWithoutParentContentInput {
  create: [CommentCreateWithoutParentContentInput!]
  delete: [CommentWhereUniqueInput!]
  connect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  disconnect: [CommentWhereUniqueInput!]
  update: [CommentUpdateWithWhereUniqueWithoutParentContentInput!]
  upsert: [CommentUpsertWithWhereUniqueWithoutParentContentInput!]
  deleteMany: [CommentScalarWhereInput!]
  updateMany: [CommentUpdateManyWithWhereNestedInput!]
}

input CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput!
  data: CommentUpdateManyDataInput!
}

input CommentUpdateOneInput {
  create: CommentCreateInput
  update: CommentUpdateDataInput
  upsert: CommentUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: CommentWhereUniqueInput
}

input CommentUpdateWithoutParentContentDataInput {
  guid: ID
  author: UserUpdateOneRequiredInput
  parentComment: CommentUpdateOneInput
  content: String
}

input CommentUpdateWithWhereUniqueWithoutParentContentInput {
  where: CommentWhereUniqueInput!
  data: CommentUpdateWithoutParentContentDataInput!
}

input CommentUpsertNestedInput {
  update: CommentUpdateDataInput!
  create: CommentCreateInput!
}

input CommentUpsertWithWhereUniqueWithoutParentContentInput {
  where: CommentWhereUniqueInput!
  update: CommentUpdateWithoutParentContentDataInput!
  create: CommentCreateWithoutParentContentInput!
}

input CommentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  author: UserWhereInput
  parentContent: DiscussionWhereInput
  parentComment: CommentWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
}

input CommentWhereUniqueInput {
  id: ID
  guid: ID
}

type Discussion {
  id: ID!
  guid: ID!
  author: User!
  group: Group!
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  title: String!
  content: String!
}

type DiscussionConnection {
  pageInfo: PageInfo!
  edges: [DiscussionEdge]!
  aggregate: AggregateDiscussion!
}

input DiscussionCreateInput {
  id: ID
  guid: ID!
  author: UserCreateOneWithoutAuthorOfInput!
  group: GroupCreateOneWithoutDiscussionsInput!
  comments: CommentCreateManyWithoutParentContentInput
  title: String!
  content: String!
}

input DiscussionCreateManyWithoutAuthorInput {
  create: [DiscussionCreateWithoutAuthorInput!]
  connect: [DiscussionWhereUniqueInput!]
}

input DiscussionCreateManyWithoutGroupInput {
  create: [DiscussionCreateWithoutGroupInput!]
  connect: [DiscussionWhereUniqueInput!]
}

input DiscussionCreateOneWithoutCommentsInput {
  create: DiscussionCreateWithoutCommentsInput
  connect: DiscussionWhereUniqueInput
}

input DiscussionCreateWithoutAuthorInput {
  id: ID
  guid: ID!
  group: GroupCreateOneWithoutDiscussionsInput!
  comments: CommentCreateManyWithoutParentContentInput
  title: String!
  content: String!
}

input DiscussionCreateWithoutCommentsInput {
  id: ID
  guid: ID!
  author: UserCreateOneWithoutAuthorOfInput!
  group: GroupCreateOneWithoutDiscussionsInput!
  title: String!
  content: String!
}

input DiscussionCreateWithoutGroupInput {
  id: ID
  guid: ID!
  author: UserCreateOneWithoutAuthorOfInput!
  comments: CommentCreateManyWithoutParentContentInput
  title: String!
  content: String!
}

type DiscussionEdge {
  node: Discussion!
  cursor: String!
}

enum DiscussionOrderByInput {
  id_ASC
  id_DESC
  guid_ASC
  guid_DESC
  title_ASC
  title_DESC
  content_ASC
  content_DESC
}

type DiscussionPreviousValues {
  id: ID!
  guid: ID!
  title: String!
  content: String!
}

input DiscussionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [DiscussionScalarWhereInput!]
  OR: [DiscussionScalarWhereInput!]
  NOT: [DiscussionScalarWhereInput!]
}

type DiscussionSubscriptionPayload {
  mutation: MutationType!
  node: Discussion
  updatedFields: [String!]
  previousValues: DiscussionPreviousValues
}

input DiscussionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DiscussionWhereInput
  AND: [DiscussionSubscriptionWhereInput!]
  OR: [DiscussionSubscriptionWhereInput!]
  NOT: [DiscussionSubscriptionWhereInput!]
}

input DiscussionUpdateInput {
  guid: ID
  author: UserUpdateOneRequiredWithoutAuthorOfInput
  group: GroupUpdateOneRequiredWithoutDiscussionsInput
  comments: CommentUpdateManyWithoutParentContentInput
  title: String
  content: String
}

input DiscussionUpdateManyDataInput {
  guid: ID
  title: String
  content: String
}

input DiscussionUpdateManyMutationInput {
  guid: ID
  title: String
  content: String
}

input DiscussionUpdateManyWithoutAuthorInput {
  create: [DiscussionCreateWithoutAuthorInput!]
  delete: [DiscussionWhereUniqueInput!]
  connect: [DiscussionWhereUniqueInput!]
  set: [DiscussionWhereUniqueInput!]
  disconnect: [DiscussionWhereUniqueInput!]
  update: [DiscussionUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [DiscussionUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [DiscussionScalarWhereInput!]
  updateMany: [DiscussionUpdateManyWithWhereNestedInput!]
}

input DiscussionUpdateManyWithoutGroupInput {
  create: [DiscussionCreateWithoutGroupInput!]
  delete: [DiscussionWhereUniqueInput!]
  connect: [DiscussionWhereUniqueInput!]
  set: [DiscussionWhereUniqueInput!]
  disconnect: [DiscussionWhereUniqueInput!]
  update: [DiscussionUpdateWithWhereUniqueWithoutGroupInput!]
  upsert: [DiscussionUpsertWithWhereUniqueWithoutGroupInput!]
  deleteMany: [DiscussionScalarWhereInput!]
  updateMany: [DiscussionUpdateManyWithWhereNestedInput!]
}

input DiscussionUpdateManyWithWhereNestedInput {
  where: DiscussionScalarWhereInput!
  data: DiscussionUpdateManyDataInput!
}

input DiscussionUpdateOneRequiredWithoutCommentsInput {
  create: DiscussionCreateWithoutCommentsInput
  update: DiscussionUpdateWithoutCommentsDataInput
  upsert: DiscussionUpsertWithoutCommentsInput
  connect: DiscussionWhereUniqueInput
}

input DiscussionUpdateWithoutAuthorDataInput {
  guid: ID
  group: GroupUpdateOneRequiredWithoutDiscussionsInput
  comments: CommentUpdateManyWithoutParentContentInput
  title: String
  content: String
}

input DiscussionUpdateWithoutCommentsDataInput {
  guid: ID
  author: UserUpdateOneRequiredWithoutAuthorOfInput
  group: GroupUpdateOneRequiredWithoutDiscussionsInput
  title: String
  content: String
}

input DiscussionUpdateWithoutGroupDataInput {
  guid: ID
  author: UserUpdateOneRequiredWithoutAuthorOfInput
  comments: CommentUpdateManyWithoutParentContentInput
  title: String
  content: String
}

input DiscussionUpdateWithWhereUniqueWithoutAuthorInput {
  where: DiscussionWhereUniqueInput!
  data: DiscussionUpdateWithoutAuthorDataInput!
}

input DiscussionUpdateWithWhereUniqueWithoutGroupInput {
  where: DiscussionWhereUniqueInput!
  data: DiscussionUpdateWithoutGroupDataInput!
}

input DiscussionUpsertWithoutCommentsInput {
  update: DiscussionUpdateWithoutCommentsDataInput!
  create: DiscussionCreateWithoutCommentsInput!
}

input DiscussionUpsertWithWhereUniqueWithoutAuthorInput {
  where: DiscussionWhereUniqueInput!
  update: DiscussionUpdateWithoutAuthorDataInput!
  create: DiscussionCreateWithoutAuthorInput!
}

input DiscussionUpsertWithWhereUniqueWithoutGroupInput {
  where: DiscussionWhereUniqueInput!
  update: DiscussionUpdateWithoutGroupDataInput!
  create: DiscussionCreateWithoutGroupInput!
}

input DiscussionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  author: UserWhereInput
  group: GroupWhereInput
  comments_every: CommentWhereInput
  comments_some: CommentWhereInput
  comments_none: CommentWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [DiscussionWhereInput!]
  OR: [DiscussionWhereInput!]
  NOT: [DiscussionWhereInput!]
}

input DiscussionWhereUniqueInput {
  id: ID
  guid: ID
}

type Group {
  id: ID!
  guid: ID!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  discussions(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion!]
  name: String!
  isPublic: Boolean!
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  id: ID
  guid: ID!
  members: UserCreateManyWithoutGroupsJoinedInput
  discussions: DiscussionCreateManyWithoutGroupInput
  name: String!
  isPublic: Boolean!
}

input GroupCreateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateOneWithoutDiscussionsInput {
  create: GroupCreateWithoutDiscussionsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutDiscussionsInput {
  id: ID
  guid: ID!
  members: UserCreateManyWithoutGroupsJoinedInput
  name: String!
  isPublic: Boolean!
}

input GroupCreateWithoutMembersInput {
  id: ID
  guid: ID!
  discussions: DiscussionCreateManyWithoutGroupInput
  name: String!
  isPublic: Boolean!
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  guid_ASC
  guid_DESC
  name_ASC
  name_DESC
  isPublic_ASC
  isPublic_DESC
}

type GroupPreviousValues {
  id: ID!
  guid: ID!
  name: String!
  isPublic: Boolean!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPublic: Boolean
  isPublic_not: Boolean
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  guid: ID
  members: UserUpdateManyWithoutGroupsJoinedInput
  discussions: DiscussionUpdateManyWithoutGroupInput
  name: String
  isPublic: Boolean
}

input GroupUpdateManyDataInput {
  guid: ID
  name: String
  isPublic: Boolean
}

input GroupUpdateManyMutationInput {
  guid: ID
  name: String
  isPublic: Boolean
}

input GroupUpdateManyWithoutMembersInput {
  create: [GroupCreateWithoutMembersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateOneRequiredWithoutDiscussionsInput {
  create: GroupCreateWithoutDiscussionsInput
  update: GroupUpdateWithoutDiscussionsDataInput
  upsert: GroupUpsertWithoutDiscussionsInput
  connect: GroupWhereUniqueInput
}

input GroupUpdateWithoutDiscussionsDataInput {
  guid: ID
  members: UserUpdateManyWithoutGroupsJoinedInput
  name: String
  isPublic: Boolean
}

input GroupUpdateWithoutMembersDataInput {
  guid: ID
  discussions: DiscussionUpdateManyWithoutGroupInput
  name: String
  isPublic: Boolean
}

input GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutMembersDataInput!
}

input GroupUpsertWithoutDiscussionsInput {
  update: GroupUpdateWithoutDiscussionsDataInput!
  create: GroupCreateWithoutDiscussionsInput!
}

input GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutMembersDataInput!
  create: GroupCreateWithoutMembersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  discussions_every: DiscussionWhereInput
  discussions_some: DiscussionWhereInput
  discussions_none: DiscussionWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  isPublic: Boolean
  isPublic_not: Boolean
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
  guid: ID
}

scalar Long

type Mutation {
  createComment(data: CommentCreateInput!): Comment!
  updateComment(data: CommentUpdateInput!, where: CommentWhereUniqueInput!): Comment
  updateManyComments(data: CommentUpdateManyMutationInput!, where: CommentWhereInput): BatchPayload!
  upsertComment(where: CommentWhereUniqueInput!, create: CommentCreateInput!, update: CommentUpdateInput!): Comment!
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteManyComments(where: CommentWhereInput): BatchPayload!
  createDiscussion(data: DiscussionCreateInput!): Discussion!
  updateDiscussion(data: DiscussionUpdateInput!, where: DiscussionWhereUniqueInput!): Discussion
  updateManyDiscussions(data: DiscussionUpdateManyMutationInput!, where: DiscussionWhereInput): BatchPayload!
  upsertDiscussion(where: DiscussionWhereUniqueInput!, create: DiscussionCreateInput!, update: DiscussionUpdateInput!): Discussion!
  deleteDiscussion(where: DiscussionWhereUniqueInput!): Discussion
  deleteManyDiscussions(where: DiscussionWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Comment]!
  commentsConnection(where: CommentWhereInput, orderBy: CommentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CommentConnection!
  discussion(where: DiscussionWhereUniqueInput!): Discussion
  discussions(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion]!
  discussionsConnection(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DiscussionConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  comment(where: CommentSubscriptionWhereInput): CommentSubscriptionPayload
  discussion(where: DiscussionSubscriptionWhereInput): DiscussionSubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  guid: ID!
  email: String!
  groupsJoined(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  authorOf(where: DiscussionWhereInput, orderBy: DiscussionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Discussion!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  guid: ID!
  email: String!
  groupsJoined: GroupCreateManyWithoutMembersInput
  authorOf: DiscussionCreateManyWithoutAuthorInput
}

input UserCreateManyWithoutGroupsJoinedInput {
  create: [UserCreateWithoutGroupsJoinedInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutAuthorOfInput {
  create: UserCreateWithoutAuthorOfInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAuthorOfInput {
  id: ID
  guid: ID!
  email: String!
  groupsJoined: GroupCreateManyWithoutMembersInput
}

input UserCreateWithoutGroupsJoinedInput {
  id: ID
  guid: ID!
  email: String!
  authorOf: DiscussionCreateManyWithoutAuthorInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  guid_ASC
  guid_DESC
  email_ASC
  email_DESC
}

type UserPreviousValues {
  id: ID!
  guid: ID!
  email: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  guid: ID
  email: String
  groupsJoined: GroupUpdateManyWithoutMembersInput
  authorOf: DiscussionUpdateManyWithoutAuthorInput
}

input UserUpdateInput {
  guid: ID
  email: String
  groupsJoined: GroupUpdateManyWithoutMembersInput
  authorOf: DiscussionUpdateManyWithoutAuthorInput
}

input UserUpdateManyDataInput {
  guid: ID
  email: String
}

input UserUpdateManyMutationInput {
  guid: ID
  email: String
}

input UserUpdateManyWithoutGroupsJoinedInput {
  create: [UserCreateWithoutGroupsJoinedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsJoinedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsJoinedInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutAuthorOfInput {
  create: UserCreateWithoutAuthorOfInput
  update: UserUpdateWithoutAuthorOfDataInput
  upsert: UserUpsertWithoutAuthorOfInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutAuthorOfDataInput {
  guid: ID
  email: String
  groupsJoined: GroupUpdateManyWithoutMembersInput
}

input UserUpdateWithoutGroupsJoinedDataInput {
  guid: ID
  email: String
  authorOf: DiscussionUpdateManyWithoutAuthorInput
}

input UserUpdateWithWhereUniqueWithoutGroupsJoinedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsJoinedDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutAuthorOfInput {
  update: UserUpdateWithoutAuthorOfDataInput!
  create: UserCreateWithoutAuthorOfInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsJoinedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsJoinedDataInput!
  create: UserCreateWithoutGroupsJoinedInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  guid: ID
  guid_not: ID
  guid_in: [ID!]
  guid_not_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_gt: ID
  guid_gte: ID
  guid_contains: ID
  guid_not_contains: ID
  guid_starts_with: ID
  guid_not_starts_with: ID
  guid_ends_with: ID
  guid_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  groupsJoined_every: GroupWhereInput
  groupsJoined_some: GroupWhereInput
  groupsJoined_none: GroupWhereInput
  authorOf_every: DiscussionWhereInput
  authorOf_some: DiscussionWhereInput
  authorOf_none: DiscussionWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  guid: ID
}
`