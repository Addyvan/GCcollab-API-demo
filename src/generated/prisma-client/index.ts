// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  comment: (where?: CommentWhereInput) => Promise<boolean>;
  discussion: (where?: DiscussionWhereInput) => Promise<boolean>;
  group: (where?: GroupWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  comment: (where: CommentWhereUniqueInput) => CommentPromise;
  comments: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Comment>;
  commentsConnection: (
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CommentConnectionPromise;
  discussion: (where: DiscussionWhereUniqueInput) => DiscussionPromise;
  discussions: (
    args?: {
      where?: DiscussionWhereInput;
      orderBy?: DiscussionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Discussion>;
  discussionsConnection: (
    args?: {
      where?: DiscussionWhereInput;
      orderBy?: DiscussionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => DiscussionConnectionPromise;
  group: (where: GroupWhereUniqueInput) => GroupPromise;
  groups: (
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Group>;
  groupsConnection: (
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => GroupConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createComment: (data: CommentCreateInput) => CommentPromise;
  updateComment: (
    args: { data: CommentUpdateInput; where: CommentWhereUniqueInput }
  ) => CommentPromise;
  updateManyComments: (
    args: { data: CommentUpdateManyMutationInput; where?: CommentWhereInput }
  ) => BatchPayloadPromise;
  upsertComment: (
    args: {
      where: CommentWhereUniqueInput;
      create: CommentCreateInput;
      update: CommentUpdateInput;
    }
  ) => CommentPromise;
  deleteComment: (where: CommentWhereUniqueInput) => CommentPromise;
  deleteManyComments: (where?: CommentWhereInput) => BatchPayloadPromise;
  createDiscussion: (data: DiscussionCreateInput) => DiscussionPromise;
  updateDiscussion: (
    args: { data: DiscussionUpdateInput; where: DiscussionWhereUniqueInput }
  ) => DiscussionPromise;
  updateManyDiscussions: (
    args: {
      data: DiscussionUpdateManyMutationInput;
      where?: DiscussionWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertDiscussion: (
    args: {
      where: DiscussionWhereUniqueInput;
      create: DiscussionCreateInput;
      update: DiscussionUpdateInput;
    }
  ) => DiscussionPromise;
  deleteDiscussion: (where: DiscussionWhereUniqueInput) => DiscussionPromise;
  deleteManyDiscussions: (where?: DiscussionWhereInput) => BatchPayloadPromise;
  createGroup: (data: GroupCreateInput) => GroupPromise;
  updateGroup: (
    args: { data: GroupUpdateInput; where: GroupWhereUniqueInput }
  ) => GroupPromise;
  updateManyGroups: (
    args: { data: GroupUpdateManyMutationInput; where?: GroupWhereInput }
  ) => BatchPayloadPromise;
  upsertGroup: (
    args: {
      where: GroupWhereUniqueInput;
      create: GroupCreateInput;
      update: GroupUpdateInput;
    }
  ) => GroupPromise;
  deleteGroup: (where: GroupWhereUniqueInput) => GroupPromise;
  deleteManyGroups: (where?: GroupWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  comment: (
    where?: CommentSubscriptionWhereInput
  ) => CommentSubscriptionPayloadSubscription;
  discussion: (
    where?: DiscussionSubscriptionWhereInput
  ) => DiscussionSubscriptionPayloadSubscription;
  group: (
    where?: GroupSubscriptionWhereInput
  ) => GroupSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type GroupOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guid_ASC"
  | "guid_DESC"
  | "name_ASC"
  | "name_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guid_ASC"
  | "guid_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type DiscussionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guid_ASC"
  | "guid_DESC"
  | "title_ASC"
  | "title_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CommentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "guid_ASC"
  | "guid_DESC"
  | "content_ASC"
  | "content_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface DiscussionUpdateWithoutGroupDataInput {
  guid?: ID_Input;
  author?: UserUpdateOneRequiredWithoutAuthorOfInput;
  comments?: CommentUpdateManyInput;
  title?: String;
  content?: String;
}

export type CommentWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  guid?: ID_Input;
}>;

export interface CommentUpdateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  update?:
    | CommentUpdateWithWhereUniqueNestedInput[]
    | CommentUpdateWithWhereUniqueNestedInput;
  upsert?:
    | CommentUpsertWithWhereUniqueNestedInput[]
    | CommentUpsertWithWhereUniqueNestedInput;
  delete?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  set?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  disconnect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
  deleteMany?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  updateMany?:
    | CommentUpdateManyWithWhereNestedInput[]
    | CommentUpdateManyWithWhereNestedInput;
}

export interface DiscussionWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  group?: GroupWhereInput;
  comments_every?: CommentWhereInput;
  comments_some?: CommentWhereInput;
  comments_none?: CommentWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: DiscussionWhereInput[] | DiscussionWhereInput;
  OR?: DiscussionWhereInput[] | DiscussionWhereInput;
  NOT?: DiscussionWhereInput[] | DiscussionWhereInput;
}

export interface UserCreateWithoutGroupsJoinedInput {
  id?: ID_Input;
  guid: ID_Input;
  email: String;
  authorOf?: DiscussionCreateManyWithoutAuthorInput;
}

export interface UserUpsertWithWhereUniqueWithoutGroupsJoinedInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutGroupsJoinedDataInput;
  create: UserCreateWithoutGroupsJoinedInput;
}

export interface CommentCreateOneInput {
  create?: CommentCreateInput;
  connect?: CommentWhereUniqueInput;
}

export interface CommentUpdateWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateDataInput;
}

export interface CommentUpdateInput {
  guid?: ID_Input;
  author?: UserUpdateOneRequiredInput;
  parentComment?: CommentUpdateOneInput;
  content?: String;
}

export interface GroupSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: GroupWhereInput;
  AND?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  OR?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
  NOT?: GroupSubscriptionWhereInput[] | GroupSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  connect?: UserWhereUniqueInput;
}

export interface DiscussionSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: DiscussionWhereInput;
  AND?: DiscussionSubscriptionWhereInput[] | DiscussionSubscriptionWhereInput;
  OR?: DiscussionSubscriptionWhereInput[] | DiscussionSubscriptionWhereInput;
  NOT?: DiscussionSubscriptionWhereInput[] | DiscussionSubscriptionWhereInput;
}

export interface UserUpdateDataInput {
  guid?: ID_Input;
  email?: String;
  groupsJoined?: GroupUpdateManyWithoutMembersInput;
  authorOf?: DiscussionUpdateManyWithoutAuthorInput;
}

export interface UserUpdateManyMutationInput {
  guid?: ID_Input;
  email?: String;
}

export interface GroupUpdateManyWithoutMembersInput {
  create?: GroupCreateWithoutMembersInput[] | GroupCreateWithoutMembersInput;
  delete?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  set?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  disconnect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
  update?:
    | GroupUpdateWithWhereUniqueWithoutMembersInput[]
    | GroupUpdateWithWhereUniqueWithoutMembersInput;
  upsert?:
    | GroupUpsertWithWhereUniqueWithoutMembersInput[]
    | GroupUpsertWithWhereUniqueWithoutMembersInput;
  deleteMany?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  updateMany?:
    | GroupUpdateManyWithWhereNestedInput[]
    | GroupUpdateManyWithWhereNestedInput;
}

export interface GroupUpdateManyMutationInput {
  guid?: ID_Input;
  name?: String;
  isPublic?: Boolean;
}

export interface GroupUpdateWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput;
  data: GroupUpdateWithoutMembersDataInput;
}

export interface GroupCreateInput {
  id?: ID_Input;
  guid: ID_Input;
  members?: UserCreateManyWithoutGroupsJoinedInput;
  discussions?: DiscussionCreateManyWithoutGroupInput;
  name: String;
  isPublic: Boolean;
}

export interface GroupUpdateWithoutMembersDataInput {
  guid?: ID_Input;
  discussions?: DiscussionUpdateManyWithoutGroupInput;
  name?: String;
  isPublic?: Boolean;
}

export interface DiscussionUpdateManyMutationInput {
  guid?: ID_Input;
  title?: String;
  content?: String;
}

export interface DiscussionUpdateManyWithoutGroupInput {
  create?:
    | DiscussionCreateWithoutGroupInput[]
    | DiscussionCreateWithoutGroupInput;
  delete?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  connect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  set?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  disconnect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  update?:
    | DiscussionUpdateWithWhereUniqueWithoutGroupInput[]
    | DiscussionUpdateWithWhereUniqueWithoutGroupInput;
  upsert?:
    | DiscussionUpsertWithWhereUniqueWithoutGroupInput[]
    | DiscussionUpsertWithWhereUniqueWithoutGroupInput;
  deleteMany?: DiscussionScalarWhereInput[] | DiscussionScalarWhereInput;
  updateMany?:
    | DiscussionUpdateManyWithWhereNestedInput[]
    | DiscussionUpdateManyWithWhereNestedInput;
}

export interface DiscussionCreateInput {
  id?: ID_Input;
  guid: ID_Input;
  author: UserCreateOneWithoutAuthorOfInput;
  group: GroupCreateOneWithoutDiscussionsInput;
  comments?: CommentCreateManyInput;
  title: String;
  content: String;
}

export interface DiscussionUpdateWithWhereUniqueWithoutGroupInput {
  where: DiscussionWhereUniqueInput;
  data: DiscussionUpdateWithoutGroupDataInput;
}

export interface CommentUpdateManyMutationInput {
  guid?: ID_Input;
  content?: String;
}

export interface UserScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  AND?: UserScalarWhereInput[] | UserScalarWhereInput;
  OR?: UserScalarWhereInput[] | UserScalarWhereInput;
  NOT?: UserScalarWhereInput[] | UserScalarWhereInput;
}

export interface DiscussionUpsertWithWhereUniqueWithoutAuthorInput {
  where: DiscussionWhereUniqueInput;
  update: DiscussionUpdateWithoutAuthorDataInput;
  create: DiscussionCreateWithoutAuthorInput;
}

export interface UserUpdateOneRequiredWithoutAuthorOfInput {
  create?: UserCreateWithoutAuthorOfInput;
  update?: UserUpdateWithoutAuthorOfDataInput;
  upsert?: UserUpsertWithoutAuthorOfInput;
  connect?: UserWhereUniqueInput;
}

export interface GroupUpsertWithoutDiscussionsInput {
  update: GroupUpdateWithoutDiscussionsDataInput;
  create: GroupCreateWithoutDiscussionsInput;
}

export interface UserUpdateWithoutAuthorOfDataInput {
  guid?: ID_Input;
  email?: String;
  groupsJoined?: GroupUpdateManyWithoutMembersInput;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpsertWithoutAuthorOfInput {
  update: UserUpdateWithoutAuthorOfDataInput;
  create: UserCreateWithoutAuthorOfInput;
}

export interface CommentCreateInput {
  id?: ID_Input;
  guid: ID_Input;
  author: UserCreateOneInput;
  parentComment?: CommentCreateOneInput;
  content: String;
}

export interface CommentWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  author?: UserWhereInput;
  parentComment?: CommentWhereInput;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: CommentWhereInput[] | CommentWhereInput;
  OR?: CommentWhereInput[] | CommentWhereInput;
  NOT?: CommentWhereInput[] | CommentWhereInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  guid: ID_Input;
  email: String;
  groupsJoined?: GroupCreateManyWithoutMembersInput;
  authorOf?: DiscussionCreateManyWithoutAuthorInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  groupsJoined_every?: GroupWhereInput;
  groupsJoined_some?: GroupWhereInput;
  groupsJoined_none?: GroupWhereInput;
  authorOf_every?: DiscussionWhereInput;
  authorOf_some?: DiscussionWhereInput;
  authorOf_none?: DiscussionWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface GroupCreateWithoutMembersInput {
  id?: ID_Input;
  guid: ID_Input;
  discussions?: DiscussionCreateManyWithoutGroupInput;
  name: String;
  isPublic: Boolean;
}

export interface CommentUpdateDataInput {
  guid?: ID_Input;
  author?: UserUpdateOneRequiredInput;
  parentComment?: CommentUpdateOneInput;
  content?: String;
}

export interface DiscussionCreateWithoutGroupInput {
  id?: ID_Input;
  guid: ID_Input;
  author: UserCreateOneWithoutAuthorOfInput;
  comments?: CommentCreateManyInput;
  title: String;
  content: String;
}

export interface CommentUpdateOneInput {
  create?: CommentCreateInput;
  update?: CommentUpdateDataInput;
  upsert?: CommentUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CommentWhereUniqueInput;
}

export interface UserCreateWithoutAuthorOfInput {
  id?: ID_Input;
  guid: ID_Input;
  email: String;
  groupsJoined?: GroupCreateManyWithoutMembersInput;
}

export interface CommentUpsertNestedInput {
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface DiscussionCreateManyWithoutAuthorInput {
  create?:
    | DiscussionCreateWithoutAuthorInput[]
    | DiscussionCreateWithoutAuthorInput;
  connect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
}

export interface CommentUpsertWithWhereUniqueNestedInput {
  where: CommentWhereUniqueInput;
  update: CommentUpdateDataInput;
  create: CommentCreateInput;
}

export interface GroupCreateOneWithoutDiscussionsInput {
  create?: GroupCreateWithoutDiscussionsInput;
  connect?: GroupWhereUniqueInput;
}

export interface CommentScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  OR?: CommentScalarWhereInput[] | CommentScalarWhereInput;
  NOT?: CommentScalarWhereInput[] | CommentScalarWhereInput;
}

export interface UserCreateManyWithoutGroupsJoinedInput {
  create?:
    | UserCreateWithoutGroupsJoinedInput[]
    | UserCreateWithoutGroupsJoinedInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface GroupWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  members_every?: UserWhereInput;
  members_some?: UserWhereInput;
  members_none?: UserWhereInput;
  discussions_every?: DiscussionWhereInput;
  discussions_some?: DiscussionWhereInput;
  discussions_none?: DiscussionWhereInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  AND?: GroupWhereInput[] | GroupWhereInput;
  OR?: GroupWhereInput[] | GroupWhereInput;
  NOT?: GroupWhereInput[] | GroupWhereInput;
}

export interface CommentUpdateManyDataInput {
  guid?: ID_Input;
  content?: String;
}

export interface UserUpdateInput {
  guid?: ID_Input;
  email?: String;
  groupsJoined?: GroupUpdateManyWithoutMembersInput;
  authorOf?: DiscussionUpdateManyWithoutAuthorInput;
}

export interface DiscussionUpsertWithWhereUniqueWithoutGroupInput {
  where: DiscussionWhereUniqueInput;
  update: DiscussionUpdateWithoutGroupDataInput;
  create: DiscussionCreateWithoutGroupInput;
}

export type DiscussionWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  guid?: ID_Input;
}>;

export interface DiscussionScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  content?: String;
  content_not?: String;
  content_in?: String[] | String;
  content_not_in?: String[] | String;
  content_lt?: String;
  content_lte?: String;
  content_gt?: String;
  content_gte?: String;
  content_contains?: String;
  content_not_contains?: String;
  content_starts_with?: String;
  content_not_starts_with?: String;
  content_ends_with?: String;
  content_not_ends_with?: String;
  AND?: DiscussionScalarWhereInput[] | DiscussionScalarWhereInput;
  OR?: DiscussionScalarWhereInput[] | DiscussionScalarWhereInput;
  NOT?: DiscussionScalarWhereInput[] | DiscussionScalarWhereInput;
}

export type GroupWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  guid?: ID_Input;
}>;

export interface DiscussionUpdateManyWithWhereNestedInput {
  where: DiscussionScalarWhereInput;
  data: DiscussionUpdateManyDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  guid?: ID_Input;
}>;

export interface DiscussionUpdateManyDataInput {
  guid?: ID_Input;
  title?: String;
  content?: String;
}

export interface GroupCreateManyWithoutMembersInput {
  create?: GroupCreateWithoutMembersInput[] | GroupCreateWithoutMembersInput;
  connect?: GroupWhereUniqueInput[] | GroupWhereUniqueInput;
}

export interface GroupUpsertWithWhereUniqueWithoutMembersInput {
  where: GroupWhereUniqueInput;
  update: GroupUpdateWithoutMembersDataInput;
  create: GroupCreateWithoutMembersInput;
}

export interface UserCreateOneWithoutAuthorOfInput {
  create?: UserCreateWithoutAuthorOfInput;
  connect?: UserWhereUniqueInput;
}

export interface GroupScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  guid?: ID_Input;
  guid_not?: ID_Input;
  guid_in?: ID_Input[] | ID_Input;
  guid_not_in?: ID_Input[] | ID_Input;
  guid_lt?: ID_Input;
  guid_lte?: ID_Input;
  guid_gt?: ID_Input;
  guid_gte?: ID_Input;
  guid_contains?: ID_Input;
  guid_not_contains?: ID_Input;
  guid_starts_with?: ID_Input;
  guid_not_starts_with?: ID_Input;
  guid_ends_with?: ID_Input;
  guid_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  AND?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  OR?: GroupScalarWhereInput[] | GroupScalarWhereInput;
  NOT?: GroupScalarWhereInput[] | GroupScalarWhereInput;
}

export interface DiscussionCreateWithoutAuthorInput {
  id?: ID_Input;
  guid: ID_Input;
  group: GroupCreateOneWithoutDiscussionsInput;
  comments?: CommentCreateManyInput;
  title: String;
  content: String;
}

export interface GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput;
  data: GroupUpdateManyDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface GroupUpdateManyDataInput {
  guid?: ID_Input;
  name?: String;
  isPublic?: Boolean;
}

export interface GroupUpdateInput {
  guid?: ID_Input;
  members?: UserUpdateManyWithoutGroupsJoinedInput;
  discussions?: DiscussionUpdateManyWithoutGroupInput;
  name?: String;
  isPublic?: Boolean;
}

export interface DiscussionUpdateManyWithoutAuthorInput {
  create?:
    | DiscussionCreateWithoutAuthorInput[]
    | DiscussionCreateWithoutAuthorInput;
  delete?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  connect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  set?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  disconnect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
  update?:
    | DiscussionUpdateWithWhereUniqueWithoutAuthorInput[]
    | DiscussionUpdateWithWhereUniqueWithoutAuthorInput;
  upsert?:
    | DiscussionUpsertWithWhereUniqueWithoutAuthorInput[]
    | DiscussionUpsertWithWhereUniqueWithoutAuthorInput;
  deleteMany?: DiscussionScalarWhereInput[] | DiscussionScalarWhereInput;
  updateMany?:
    | DiscussionUpdateManyWithWhereNestedInput[]
    | DiscussionUpdateManyWithWhereNestedInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface DiscussionUpdateWithWhereUniqueWithoutAuthorInput {
  where: DiscussionWhereUniqueInput;
  data: DiscussionUpdateWithoutAuthorDataInput;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface DiscussionUpdateWithoutAuthorDataInput {
  guid?: ID_Input;
  group?: GroupUpdateOneRequiredWithoutDiscussionsInput;
  comments?: CommentUpdateManyInput;
  title?: String;
  content?: String;
}

export interface CommentCreateManyInput {
  create?: CommentCreateInput[] | CommentCreateInput;
  connect?: CommentWhereUniqueInput[] | CommentWhereUniqueInput;
}

export interface GroupUpdateOneRequiredWithoutDiscussionsInput {
  create?: GroupCreateWithoutDiscussionsInput;
  update?: GroupUpdateWithoutDiscussionsDataInput;
  upsert?: GroupUpsertWithoutDiscussionsInput;
  connect?: GroupWhereUniqueInput;
}

export interface CommentSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CommentWhereInput;
  AND?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  OR?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
  NOT?: CommentSubscriptionWhereInput[] | CommentSubscriptionWhereInput;
}

export interface UserUpdateWithoutGroupsJoinedDataInput {
  guid?: ID_Input;
  email?: String;
  authorOf?: DiscussionUpdateManyWithoutAuthorInput;
}

export interface UserUpdateWithWhereUniqueWithoutGroupsJoinedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGroupsJoinedDataInput;
}

export interface UserUpdateManyWithoutGroupsJoinedInput {
  create?:
    | UserCreateWithoutGroupsJoinedInput[]
    | UserCreateWithoutGroupsJoinedInput;
  delete?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  connect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  set?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  disconnect?: UserWhereUniqueInput[] | UserWhereUniqueInput;
  update?:
    | UserUpdateWithWhereUniqueWithoutGroupsJoinedInput[]
    | UserUpdateWithWhereUniqueWithoutGroupsJoinedInput;
  upsert?:
    | UserUpsertWithWhereUniqueWithoutGroupsJoinedInput[]
    | UserUpsertWithWhereUniqueWithoutGroupsJoinedInput;
  deleteMany?: UserScalarWhereInput[] | UserScalarWhereInput;
  updateMany?:
    | UserUpdateManyWithWhereNestedInput[]
    | UserUpdateManyWithWhereNestedInput;
}

export interface GroupUpdateWithoutDiscussionsDataInput {
  guid?: ID_Input;
  members?: UserUpdateManyWithoutGroupsJoinedInput;
  name?: String;
  isPublic?: Boolean;
}

export interface DiscussionUpdateInput {
  guid?: ID_Input;
  author?: UserUpdateOneRequiredWithoutAuthorOfInput;
  group?: GroupUpdateOneRequiredWithoutDiscussionsInput;
  comments?: CommentUpdateManyInput;
  title?: String;
  content?: String;
}

export interface GroupCreateWithoutDiscussionsInput {
  id?: ID_Input;
  guid: ID_Input;
  members?: UserCreateManyWithoutGroupsJoinedInput;
  name: String;
  isPublic: Boolean;
}

export interface DiscussionCreateManyWithoutGroupInput {
  create?:
    | DiscussionCreateWithoutGroupInput[]
    | DiscussionCreateWithoutGroupInput;
  connect?: DiscussionWhereUniqueInput[] | DiscussionWhereUniqueInput;
}

export interface UserUpdateManyDataInput {
  guid?: ID_Input;
  email?: String;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  guid: ID_Output;
  email: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  email: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
}

export interface CommentEdge {
  node: Comment;
  cursor: String;
}

export interface CommentEdgePromise extends Promise<CommentEdge>, Fragmentable {
  node: <T = CommentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CommentEdgeSubscription
  extends Promise<AsyncIterator<CommentEdge>>,
    Fragmentable {
  node: <T = CommentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupSubscriptionPayload {
  mutation: MutationType;
  node: Group;
  updatedFields: String[];
  previousValues: GroupPreviousValues;
}

export interface GroupSubscriptionPayloadPromise
  extends Promise<GroupSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = GroupPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = GroupPreviousValuesPromise>() => T;
}

export interface GroupSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<GroupSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = GroupSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = GroupPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CommentConnection {
  pageInfo: PageInfo;
  edges: CommentEdge[];
}

export interface CommentConnectionPromise
  extends Promise<CommentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CommentEdge>>() => T;
  aggregate: <T = AggregateCommentPromise>() => T;
}

export interface CommentConnectionSubscription
  extends Promise<AsyncIterator<CommentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CommentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCommentSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface User {
  id: ID_Output;
  guid: ID_Output;
  email: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  email: () => Promise<String>;
  groupsJoined: <T = FragmentableArray<Group>>(
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  authorOf: <T = FragmentableArray<Discussion>>(
    args?: {
      where?: DiscussionWhereInput;
      orderBy?: DiscussionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  groupsJoined: <T = Promise<AsyncIterator<GroupSubscription>>>(
    args?: {
      where?: GroupWhereInput;
      orderBy?: GroupOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  authorOf: <T = Promise<AsyncIterator<DiscussionSubscription>>>(
    args?: {
      where?: DiscussionWhereInput;
      orderBy?: DiscussionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface GroupEdge {
  node: Group;
  cursor: String;
}

export interface GroupEdgePromise extends Promise<GroupEdge>, Fragmentable {
  node: <T = GroupPromise>() => T;
  cursor: () => Promise<String>;
}

export interface GroupEdgeSubscription
  extends Promise<AsyncIterator<GroupEdge>>,
    Fragmentable {
  node: <T = GroupSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Discussion {
  id: ID_Output;
  guid: ID_Output;
  title: String;
  content: String;
}

export interface DiscussionPromise extends Promise<Discussion>, Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  group: <T = GroupPromise>() => T;
  comments: <T = FragmentableArray<Comment>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface DiscussionSubscription
  extends Promise<AsyncIterator<Discussion>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  group: <T = GroupSubscription>() => T;
  comments: <T = Promise<AsyncIterator<CommentSubscription>>>(
    args?: {
      where?: CommentWhereInput;
      orderBy?: CommentOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface Comment {
  id: ID_Output;
  guid: ID_Output;
  content: String;
}

export interface CommentPromise extends Promise<Comment>, Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  parentComment: <T = CommentPromise>() => T;
  content: () => Promise<String>;
}

export interface CommentSubscription
  extends Promise<AsyncIterator<Comment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  parentComment: <T = CommentSubscription>() => T;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateDiscussion {
  count: Int;
}

export interface AggregateDiscussionPromise
  extends Promise<AggregateDiscussion>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateDiscussionSubscription
  extends Promise<AsyncIterator<AggregateDiscussion>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CommentSubscriptionPayload {
  mutation: MutationType;
  node: Comment;
  updatedFields: String[];
  previousValues: CommentPreviousValues;
}

export interface CommentSubscriptionPayloadPromise
  extends Promise<CommentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CommentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CommentPreviousValuesPromise>() => T;
}

export interface CommentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CommentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CommentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CommentPreviousValuesSubscription>() => T;
}

export interface DiscussionConnection {
  pageInfo: PageInfo;
  edges: DiscussionEdge[];
}

export interface DiscussionConnectionPromise
  extends Promise<DiscussionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<DiscussionEdge>>() => T;
  aggregate: <T = AggregateDiscussionPromise>() => T;
}

export interface DiscussionConnectionSubscription
  extends Promise<AsyncIterator<DiscussionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<DiscussionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateDiscussionSubscription>() => T;
}

export interface CommentPreviousValues {
  id: ID_Output;
  guid: ID_Output;
  content: String;
}

export interface CommentPreviousValuesPromise
  extends Promise<CommentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  content: () => Promise<String>;
}

export interface CommentPreviousValuesSubscription
  extends Promise<AsyncIterator<CommentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface GroupConnection {
  pageInfo: PageInfo;
  edges: GroupEdge[];
}

export interface GroupConnectionPromise
  extends Promise<GroupConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<GroupEdge>>() => T;
  aggregate: <T = AggregateGroupPromise>() => T;
}

export interface GroupConnectionSubscription
  extends Promise<AsyncIterator<GroupConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<GroupEdgeSubscription>>>() => T;
  aggregate: <T = AggregateGroupSubscription>() => T;
}

export interface Group {
  id: ID_Output;
  guid: ID_Output;
  name: String;
  isPublic: Boolean;
}

export interface GroupPromise extends Promise<Group>, Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  members: <T = FragmentableArray<User>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  discussions: <T = FragmentableArray<Discussion>>(
    args?: {
      where?: DiscussionWhereInput;
      orderBy?: DiscussionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
}

export interface GroupSubscription
  extends Promise<AsyncIterator<Group>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  members: <T = Promise<AsyncIterator<UserSubscription>>>(
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  discussions: <T = Promise<AsyncIterator<DiscussionSubscription>>>(
    args?: {
      where?: DiscussionWhereInput;
      orderBy?: DiscussionOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
  name: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
}

export interface DiscussionPreviousValues {
  id: ID_Output;
  guid: ID_Output;
  title: String;
  content: String;
}

export interface DiscussionPreviousValuesPromise
  extends Promise<DiscussionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  title: () => Promise<String>;
  content: () => Promise<String>;
}

export interface DiscussionPreviousValuesSubscription
  extends Promise<AsyncIterator<DiscussionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface DiscussionSubscriptionPayload {
  mutation: MutationType;
  node: Discussion;
  updatedFields: String[];
  previousValues: DiscussionPreviousValues;
}

export interface DiscussionSubscriptionPayloadPromise
  extends Promise<DiscussionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = DiscussionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = DiscussionPreviousValuesPromise>() => T;
}

export interface DiscussionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<DiscussionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = DiscussionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = DiscussionPreviousValuesSubscription>() => T;
}

export interface GroupPreviousValues {
  id: ID_Output;
  guid: ID_Output;
  name: String;
  isPublic: Boolean;
}

export interface GroupPreviousValuesPromise
  extends Promise<GroupPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  guid: () => Promise<ID_Output>;
  name: () => Promise<String>;
  isPublic: () => Promise<Boolean>;
}

export interface GroupPreviousValuesSubscription
  extends Promise<AsyncIterator<GroupPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  guid: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateGroup {
  count: Int;
}

export interface AggregateGroupPromise
  extends Promise<AggregateGroup>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateGroupSubscription
  extends Promise<AsyncIterator<AggregateGroup>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateComment {
  count: Int;
}

export interface AggregateCommentPromise
  extends Promise<AggregateComment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCommentSubscription
  extends Promise<AsyncIterator<AggregateComment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface DiscussionEdge {
  node: Discussion;
  cursor: String;
}

export interface DiscussionEdgePromise
  extends Promise<DiscussionEdge>,
    Fragmentable {
  node: <T = DiscussionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface DiscussionEdgeSubscription
  extends Promise<AsyncIterator<DiscussionEdge>>,
    Fragmentable {
  node: <T = DiscussionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type Long = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Group",
    embedded: false
  },
  {
    name: "Discussion",
    embedded: false
  },
  {
    name: "Comment",
    embedded: false
  }
];

/**
 * Type Defs
 */
require('dotenv').config();

export const Prisma = makePrismaClientClass<ClientConstructor<Prisma>>({
  typeDefs,
  models,
  endpoint: "http://localhost:4466/"
});
export const prisma = new Prisma({
  endpoint: "http://" + process.env.PRISMA_ENDPOINT + ":" + process.env.PRISMA_PORT_NUMBER+"/demo",
  secret: process.env.PRISMA_MANAGEMENT_API_SECRET
});
