### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AggregateComment {
  count: Int!
}

type AggregateDiscussion {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type Comment {
  author: User!
  content: String!
  id: ID!
  parentComment: Comment
}

type CommentConnection {
  aggregate: AggregateComment!
  edges: [CommentEdge!]!
  pageInfo: PageInfo!
}

type CommentEdge {
  cursor: String!
  node: Comment!
}

enum CommentOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  guid_ASC
  guid_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  author: UserWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  guid: ID
  guid_contains: ID
  guid_ends_with: ID
  guid_gt: ID
  guid_gte: ID
  guid_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_not: ID
  guid_not_contains: ID
  guid_not_ends_with: ID
  guid_not_in: [ID!]
  guid_not_starts_with: ID
  guid_starts_with: ID
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  parentComment: CommentWhereInput
}

input CommentWhereUniqueInput {
  guid: ID
  id: ID
}

type Discussion {
  author: User!
  comments: [Comment!]
  content: String!
  group: Group!
  id: ID!
  title: String!
}

type DiscussionConnection {
  aggregate: AggregateDiscussion!
  edges: [DiscussionEdge!]!
  pageInfo: PageInfo!
}

type DiscussionEdge {
  cursor: String!
  node: Discussion!
}

enum DiscussionOrderByInput {
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  guid_ASC
  guid_DESC
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input DiscussionWhereInput {
  AND: [DiscussionWhereInput!]
  author: UserWhereInput
  comments_every: CommentWhereInput
  comments_none: CommentWhereInput
  comments_some: CommentWhereInput
  content: String
  content_contains: String
  content_ends_with: String
  content_gt: String
  content_gte: String
  content_in: [String!]
  content_lt: String
  content_lte: String
  content_not: String
  content_not_contains: String
  content_not_ends_with: String
  content_not_in: [String!]
  content_not_starts_with: String
  content_starts_with: String
  group: GroupWhereInput
  guid: ID
  guid_contains: ID
  guid_ends_with: ID
  guid_gt: ID
  guid_gte: ID
  guid_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_not: ID
  guid_not_contains: ID
  guid_not_ends_with: ID
  guid_not_in: [ID!]
  guid_not_starts_with: ID
  guid_starts_with: ID
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [DiscussionWhereInput!]
  OR: [DiscussionWhereInput!]
  title: String
  title_contains: String
  title_ends_with: String
  title_gt: String
  title_gte: String
  title_in: [String!]
  title_lt: String
  title_lte: String
  title_not: String
  title_not_contains: String
  title_not_ends_with: String
  title_not_in: [String!]
  title_not_starts_with: String
  title_starts_with: String
}

input DiscussionWhereUniqueInput {
  guid: ID
  id: ID
}

type Group {
  discussions: [Discussion!]
  id: ID!
  isPublic: Boolean!
  members: [User!]
  name: String!
}

type GroupConnection {
  aggregate: AggregateGroup!
  edges: [GroupEdge!]!
  pageInfo: PageInfo!
}

type GroupEdge {
  cursor: String!
  node: Group!
}

enum GroupOrderByInput {
  createdAt_ASC
  createdAt_DESC
  guid_ASC
  guid_DESC
  id_ASC
  id_DESC
  isPublic_ASC
  isPublic_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  discussions_every: DiscussionWhereInput
  discussions_none: DiscussionWhereInput
  discussions_some: DiscussionWhereInput
  guid: ID
  guid_contains: ID
  guid_ends_with: ID
  guid_gt: ID
  guid_gte: ID
  guid_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_not: ID
  guid_not_contains: ID
  guid_not_ends_with: ID
  guid_not_in: [ID!]
  guid_not_starts_with: ID
  guid_starts_with: ID
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  isPublic: Boolean
  isPublic_not: Boolean
  members_every: UserWhereInput
  members_none: UserWhereInput
  members_some: UserWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [GroupWhereInput!]
  OR: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  guid: ID
  id: ID
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Query {
  comment(where: CommentWhereUniqueInput!): Comment
  comments(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): [Comment!]!
  commentsConnection(after: String, before: String, first: Int, last: Int, orderBy: CommentOrderByInput, skip: Int, where: CommentWhereInput): CommentConnection!
  discussion(where: DiscussionWhereUniqueInput!): Discussion
  discussions(after: String, before: String, first: Int, last: Int, orderBy: DiscussionOrderByInput, skip: Int, where: DiscussionWhereInput): [Discussion!]!
  discussionsConnection(after: String, before: String, first: Int, last: Int, orderBy: DiscussionOrderByInput, skip: Int, where: DiscussionWhereInput): DiscussionConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(after: String, before: String, first: Int, last: Int, orderBy: GroupOrderByInput, skip: Int, where: GroupWhereInput): [Group!]!
  groupsConnection(after: String, before: String, first: Int, last: Int, orderBy: GroupOrderByInput, skip: Int, where: GroupWhereInput): GroupConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

type User {
  authorOf: [Discussion!]
  email: String!
  groupsJoined: [Group!]
  id: ID!
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  guid_ASC
  guid_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserWhereInput {
  AND: [UserWhereInput!]
  authorOf_every: DiscussionWhereInput
  authorOf_none: DiscussionWhereInput
  authorOf_some: DiscussionWhereInput
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  groupsJoined_every: GroupWhereInput
  groupsJoined_none: GroupWhereInput
  groupsJoined_some: GroupWhereInput
  guid: ID
  guid_contains: ID
  guid_ends_with: ID
  guid_gt: ID
  guid_gte: ID
  guid_in: [ID!]
  guid_lt: ID
  guid_lte: ID
  guid_not: ID
  guid_not_contains: ID
  guid_not_ends_with: ID
  guid_not_in: [ID!]
  guid_not_starts_with: ID
  guid_starts_with: ID
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
}

input UserWhereUniqueInput {
  guid: ID
  id: ID
}
